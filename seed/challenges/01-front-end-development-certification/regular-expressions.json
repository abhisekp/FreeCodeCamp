{
  "name": "Regular Expressions",
  "time": "4h",
  "order": 6,
  "challenges": [
    {
      "id": "cf1111c1c12feddfaeb6bdef",
      "title": "Sift through Text with Regular Expressions",
      "description": [
        "<code>Regular expressions</code> are used to find certain words or patterns inside of <code>strings</code>.",
        "For example, if we wanted to find the word <code>the</code> in the string <code>The dog chased the cat</code>, we could use the following <code>regular expression</code>: <code>/the/gi</code>",
        "Let's break this down a bit:",
        "<code>/</code> is the start of the regular expression.",
        "<code>the</code> is the pattern we want to match.",
        "<code>/</code> is the end of the regular expression.",
        "<code>g</code> means <code>global</code>, which causes the pattern to return all matches in the string, not just the first one.",
        "<code>i</code> means that we want to ignore the case (uppercase or lowercase) when searching for the pattern.",
        "<h4>Instructions</h4>",
        "Select all the occurrences of the word <code>and</code> in <code>testString</code>.",
        "You can do this by replacing the <code>.</code> part of the regular expression with the word <code>and</code>."
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// Setup",
        "var testString = \"Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.\";",
        "",
        "// Example",
        "var expressionToGetSoftware = /software/gi;",
        "var softwareCount = testString.match(expressionToGetSoftware).length;",
        "  ",
        "",
        "// Only change code below this line.",
        "",
        "var expression = /./gi;  // Change this Line",
        "",
        "// Only change code above this line",
        "",
        "// This code counts the matches of expression in testString",
        "var andCount = testString.match(expression).length;",
        ""
      ],
      "tail": [
        "(function(){return andCount;})();"
      ],
      "solutions": [
        "var testString = \"Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.\";\nvar expression = /and/gi;  // Change this Line\nvar andCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(andCount==2, 'message: Your <code>regular expression</code> should find two occurrences of the word <code>and</code>.');",
        "assert(code.match(/\\/and\\/gi/), 'message: Use <code>regular expressions</code> to find the word <code>and</code> in <code>testString</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb7bdef",
      "title": "Find Numbers with Regular Expressions",
      "description": [
        "We can use special selectors in <code>Regular Expressions</code> to select a particular type of value.",
        "One such selector is the digit selector <code>\\d</code> which is used to retrieve the numbers in a string.",
        "It is used like this: <code>/\\d/g</code>.",
        "For numbers this is often written as <code>/\\d+/g</code>, where the <code>+</code> following the digit selector allows this regular expression to match one or more numbers.",
        "<h4>Instructions</h4>",
        "Use the <code>\\d</code> selector to select the number of numbers in the string, allowing for the possibility of one or more digit."
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// Setup",
        "var testString = \"There are 3 cats but 4 dogs.\";",
        "",
        "// Only change code below this line.",
        "",
        "var expression = /.+/g;  // Change this line",
        "",
        "// Only change code above this line",
        "",
        "// This code counts the matches of expression in testString",
        "var digitCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return digitCount;})();"
      ],
      "solutions": [
        "var testString = \"There are 3 cats but 4 dogs.\";\nvar expression = /\\d+/g;  // Change this line\nvar digitCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(digitCount === 2, 'message: Your regular expression should find two numbers in <code>testString</code>.');",
        "assert(code.match(/\\/\\\\d\\+\\//g), 'message: Use the <code>/\\d+/g</code> regular expression to find the numbers in <code>testString</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb8bdef",
      "title": "Find Whitespace with Regular Expressions",
      "description": [
        "We can also use regular expression selectors like <code>\\s</code> to find whitespace in a string.",
        "The whitespace characters are <code>\" \"</code> (space), <code>\\r</code> (the carriage return), <code>\\n</code> (newline), <code>\\t</code> (tab), and <code>\\f</code> (the form feed).",
        "The whitespace regular expression looks like this:",
        "<code>/\\s+/g</code>",
        "<h4>Instructions</h4>",
        "Use <code>\\s</code> to select all the whitespace characters in the sentence string."
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// Setup",
        "var testString = \"How many spaces are there in this sentence?\";",
        "",
        "// Only change code below this line.",
        "",
        "var expression = /.+/g;  // Change this line",
        "",
        "// Only change code above this line",
        "",
        "// This code counts the matches of expression in testString",
        "var spaceCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return spaceCount;})();"
      ],
      "solutions": [
        "var testString = \"How many spaces are there in this sentence?\";\nvar expression = /\\s+/g;  // Change this line\nvar spaceCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(spaceCount === 7, 'message: Your regular expression should find seven spaces in <code>testString</code>.');",
        "assert(code.match(/\\/\\\\s\\+\\//g), 'message: Use the <code>/\\s+/g</code> regular expression to find the spaces in <code>testString</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c13feddfaeb3bdef",
      "title": "Invert Regular Expression Matches with JavaScript",
      "description": [
        "You can invert any match by using the uppercase version of the regular expression selector.",
        "For example, <code>\\s</code> will match any whitespace, and <code>\\S</code> will match anything that isn't whitespace.",
        "<h4>Instructions</h4>",
        "Use <code>/\\S/g</code> to count the number of non-whitespace characters in <code>testString</code>."
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// Setup",
        "var testString = \"How many non-space characters are there in this sentence?\";",
        "",
        "// Only change code below this line.",
        "",
        "var expression = /.+/g;  // Change this line",
        "",
        "// Only change code above this line",
        "",
        "// This code counts the matches of expression in testString",
        "var nonSpaceCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return nonSpaceCount;})();"
      ],
      "solutions": [
        "var testString = \"How many non-space characters are there in this sentence?\";\nvar expression = /\\S/g;  \nvar nonSpaceCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(nonSpaceCount === 49, 'message: Your regular expression should find forty nine non-space characters in the <code>testString</code>.');",
        "assert(code.match(/\\/\\\\S\\/g/g), 'message: Use the <code>/\\S/g</code> regular expression to find non-space characters in <code>testString</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "568a20b7faa771ba4eba8056",
      "title": "Treasure Hunt",
      "description": [
        "In the <strong>Treasure Hunt</strong> game, you need to find the hidden <strong>number</strong> (<em>the treasure</em>) in a large block of <strong>text</strong> (<em>the haystack</em>). The number can be hidden anywhere in the text.",
        "Find the <em>location</em> of the number and the <em>number</em> itself along with the <strong>text with the hidden number removed</strong>. And return it from the <strong><code>findHiddenTreasure(haystack, count)</code></strong> function as an object i.e.",
        "<blockquote>{<br>  index: 10,<br>  treasure: 465648,<br>  text: 'Lorem ipsum <strong><em>HT</em></strong> dolor sit amet, consectetur adipisicing elit.'<br>}</blockquote>",
        "Note that the <strong><code>text</code></strong> property doesn't contain the hidden number after the text <strong><code>HT</code></strong> (<em>see the first instruction</em>).",
        "",
        "<h4>Instructions</h4>",
        "Hidden numbers are preceded by the text <code>HT</code> or <code>HN</code> or <code>HTN</code> (lowercase/uppercase/mixedcase).",
        "<strong><code>{String} haystack</code></strong> is the block of text where the number is hidden.",
        "There are multiple hidden numbers in text in various places. <strong><code>{Number} count</code></strong> specifies which one to find i.e. the 1st, 2nd, 3rd, etc, number (natural number based).",
        "<strong><code>{Number} index</code></strong> is the position of the required hidden number in the text (0-based indexing)",
        "<strong><code>{Number} treasure</code></strong> is the required hidden number itself. It should be converted to a valid number removing any redundant decimals and hyphens.",
        "The number can be in various formats such as<ol><li><code>456-456-65</code> (hyphen separated)</li><li><code>954.658.7476</code> (dot separated)</li><li><code>456-456.65-9.61-46</code> (hyphen/dot separated)</li><li><code>-456659.6146</code> (negative number)</li><li><code>+456659.6146</code> (positive number)</li><li>or a mix of the above</li></ol>",
        "And <strong><code>{String} text</code></strong> is the given text (<em>the haystack</em>) with the <strong>hidden number removed</strong> (<em>the treasure</em>).",
        "If the number is not present, then the <code>index</code> property should contain <code>-1</code>, the <code>text</code> property should contain the <em>original text</em> passed and the <code>treasure</code> property should contain <code>undefined</code>."
      ],
      "releasedOn": "February 2, 2015",
      "head": [
        "var logOutput = \"\";",
        "var oldLog = console.log.bind(console);",
        "var isCaptured = false;",
        "",
        "function capture() {",
        "  isCaptured = true;",
        "  console.log = function (msg) {",
        "    // arg is an object",
        "    if(typeof msg === 'object') {",
        "      logOutput += '\\n{';",
        "      var keys = Object.keys(msg);",
        "      keys.forEach(function (key, ind) {",
        "        var msgStr = msg[key];",
        "        if(typeof msgStr === 'string') {",
        "          msgStr = '\"' + msgStr + '\"';",
        "        }",
        "        logOutput += '\\n  ' + key + ': ' + msgStr;",
        "",
        "        // not last key",
        "        if(ind !== keys.length-1) {",
        "          logOutput += ',';",
        "        }",
        "      });",
        "      logOutput += '\\n}\\n';",
        "    } else {",
        "      logOutput += msg + '\\n';",
        "    }",
        "",
        "    oldLog.apply(console, arguments);",
        "    return msg;",
        "  };",
        "}",
        "",
        "function uncapture() {",
        "  if(isCaptured) {",
        "    console.log = oldLog;",
        "    isCaptured = false;",
        "  }",
        "}",
        "",
        "capture();",
        "//try {"
      ],
      "challengeSeed": [
        "var haystack = 'LHn456-456.65-9.61-46\\n4849oreNHt456-456.65-9.61-46 ipsum doHNlor ht-456659.6146.sit amet, conhT-6564.5498sectetur adipisicing elit. Qu\\nam   fuga htn------epreht-1--19---.18e\\ndHT9erit, hT05507. veriatis distinhn456-456-65-ctio deserunt? moHn484+456htn+-65llitia nhtn+1-4.58esciun, disht.5548inctio HTn-954.658.7476veritathtt4556is sihhTn+4556ivero hnn42quo eaque, sHn456-456.65-9.61-46Tnid quisquamt Hn456-456.65-9.61-46in!';",
        "// log haystack",
        "console.log('Haystack:-\\n\"' + haystack + '\"');",
        "",
        "function findHiddenTreasure(haystack, count) {",
        "  var index = -1, treasure, removedSecret = haystack;",
        "  // write code after this line",
        "  ",
        "  ",
        "  ",
        "  // do not modify below this line",
        "  return {",
        "    index: index,",
        "    treasure: treasure,",
        "    text: removedSecret",
        "  };",
        "}",
        "",
        "// use as many console.log and see the output in display",
        "console.log(findHiddenTreasure(haystack, 14));"
      ],
      "tail": [
        "//} catch(err) {",
        "//  console.log('\\n' + err.message);",
        "//} ",
        "//finally {",
        "  uncapture();",
        "  (function() { return logOutput || \"console.log never called\"; })();",
        "//}"
      ],
      "solutions": [
        "function findHiddenTreasure(haystack, count) {\n  var index = -1, treasure, removedSecret = haystack;\n  // write code after this line\n  \n  var regex = /h(?:[tn]|tn)([+-]?\\.?\\d+[.\\d-]*)/gi;\n  var secretCount = 0;\n  \n  var matches;\n  while(secretCount < count && (matches = regex.exec(haystack)) !== null) {\n    if(++secretCount === count) {\n      treasure = +matches[1].replace(/[+.-]/g, '');\n      index = matches.index + (matches[0].length - matches[1].length);\n      removedSecret = haystack.substr(0, index) + haystack.substr(regex.lastIndex, haystack.length);\n    }\n  }\n  \n  // do not modify below this line\n  return {\n    index: index,\n    treasure: treasure,\n    text: removedSecret\n  };\n}"
      ],
      "tests": [
        "assert.deepEqual(findHiddenTreasure('LHn456-456.65-9.61-46\\n4849oreNHt456-456.65-9.61-46 ipsum doHNlor ht-456659.6146.sit amet, conhT-6564.5498sectetur adipisicing elit. Qu\\nam   fuga htn------epreht-1--19---.18e\\ndHT9erit, hT05507. veriatis distinhn456-456-65-ctio deserunt? moHn484+456htn+-65llitia nhtn+1-4.58esciun, disht.5548inctio HTn-954.658.7476veritathtt4556is sihhTn+4556ivero hnn42quo eaque, sHn456-456.65-9.61-46Tnid quisquamt Hn456-456.65-9.61-46in!', 14), {index: 366, text: 'LHn456-456.65-9.61-46\\n4849oreNHt456-456.65-9.61-46 ipsum doHNlor ht-456659.6146.sit amet, conhT-6564.5498sectetur adipisicing elit. Qu\\nam   fuga htn------epreht-1--19---.18e\\ndHT9erit, hT05507. veriatis distinhn456-456-65-ctio deserunt? moHn484+456htn+-65llitia nhtn+1-4.58esciun, disht.5548inctio HTn-954.658.7476veritathtt4556is sihhTn+4556ivero hnn42quo eaque, sHnTnid quisquamt Hn456-456.65-9.61-46in!', treasure: 4564566596146}, \"message: <code>findHiddenTreasure(haystack, 14)</code> should return <strong><code>{index: 366, text: 'LHn456-456.65-9.61-46\\n4849oreNHt456-456.65-9.61-46 ipsum doHNlor ht-456659.6146.sit amet, conhT-6564.5498sectetur adipisicing elit. Qu\\nam   fuga htn------epreht-1--19---.18e\\ndHT9erit, hT05507. veriatis distinhn456-456-65-ctio deserunt? moHn484+456htn+-65llitia nhtn+1-4.58esciun, disht.5548inctio HTn-954.658.7476veritathtt4556is sihhTn+4556ivero hnn42quo eaque, sHnTnid quisquamt Hn456-456.65-9.61-46in!', treasure: 4564566596146}</code></strong>\");"
      ],
      "type": "bonfire",
      "challengeType": 5
    }
  ]
}
